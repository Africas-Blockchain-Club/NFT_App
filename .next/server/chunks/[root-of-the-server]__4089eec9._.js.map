{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///home/sandile/NFT_App/src/database.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst DB_PATH = path.join(process.cwd(), 'public', 'data', 'users.json');\ninterface User {\n  username: string;\n  password: string;\n  privateKey: string;\n  smartAccountAddress: string;\n  createdAt: Date;\n}\n\ninterface NFT {\n  tokenId: number;\n  imageUrl: string;\n  name: string;\n  description: string;\n}\n\n// Initialize database\nconst initializeDB = () => {\n  if (!fs.existsSync(path.dirname(DB_PATH))) {\n    fs.mkdirSync(path.dirname(DB_PATH), { recursive: true });\n  }\n  if (!fs.existsSync(DB_PATH)) {\n    fs.writeFileSync(DB_PATH, JSON.stringify([]));\n  }\n};\n\n// Read users from database\nexport const getUsers = (): User[] => {\n  initializeDB();\n  try {\n    const data = fs.readFileSync(DB_PATH, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    return [];\n  }\n};\n\n// Save user to database\nexport const saveUser = (user: User): void => {\n  const users = getUsers();\n  // Check if username already exists\n  if (users.find(u => u.username === user.username)) {\n    throw new Error('Username already exists');\n  }\n  \n  users.push(user);\n  fs.writeFileSync(DB_PATH, JSON.stringify(users, null, 2));\n};\n\n// Find user by username\nexport const findUserByUsername = (username: string): User | undefined => {\n  const users = getUsers();\n  return users.find(u => u.username === username);\n};\n\n// Verify user credentials\nexport const verifyUser = (username: string, password: string): User | undefined => {\n  const user = findUserByUsername(username);\n  return user && user.password === password ? user : undefined;\n};"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,QAAQ;AAgB3D,sBAAsB;AACtB,MAAM,eAAe;IACnB,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,4GAAI,CAAC,OAAO,CAAC,WAAW;QACzC,wGAAE,CAAC,SAAS,CAAC,4GAAI,CAAC,OAAO,CAAC,UAAU;YAAE,WAAW;QAAK;IACxD;IACA,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,UAAU;QAC3B,wGAAE,CAAC,aAAa,CAAC,SAAS,KAAK,SAAS,CAAC,EAAE;IAC7C;AACF;AAGO,MAAM,WAAW;IACtB;IACA,IAAI;QACF,MAAM,OAAO,wGAAE,CAAC,YAAY,CAAC,SAAS;QACtC,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,OAAO,EAAE;IACX;AACF;AAGO,MAAM,WAAW,CAAC;IACvB,MAAM,QAAQ;IACd,mCAAmC;IACnC,IAAI,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,KAAK,QAAQ,GAAG;QACjD,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,IAAI,CAAC;IACX,wGAAE,CAAC,aAAa,CAAC,SAAS,KAAK,SAAS,CAAC,OAAO,MAAM;AACxD;AAGO,MAAM,qBAAqB,CAAC;IACjC,MAAM,QAAQ;IACd,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK;AACxC;AAGO,MAAM,aAAa,CAAC,UAAkB;IAC3C,MAAM,OAAO,mBAAmB;IAChC,OAAO,QAAQ,KAAK,QAAQ,KAAK,WAAW,OAAO;AACrD","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///home/sandile/NFT_App/src/app/api/users/signup/route.ts"],"sourcesContent":["// app/api/users/signup/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { saveUser } from '@/database';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const userData = await request.json();\n    \n    if (!userData.username || !userData.password || !userData.privateKey || !userData.smartAccountAddress) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n    \n    // Create user object\n    const user = {\n      username: userData.username,\n      password: userData.password, // You should hash this in production!\n      privateKey: userData.privateKey,\n      smartAccountAddress: userData.smartAccountAddress,\n      createdAt: new Date(userData.createdAt || new Date()),\n      ownedNFTs: userData.ownedNFTs || []\n    };\n    \n    // Save to database\n    saveUser(user);\n    \n    return NextResponse.json({ \n      message: 'User created successfully',\n      user: {\n        username: user.username,\n        smartAccountAddress: user.smartAccountAddress,\n        createdAt: user.createdAt\n      }\n    });\n    \n} catch (error: unknown) {\n  console.error('Signup API error:', error);\n  const errorMessage = error instanceof Error ? error.message : 'Internal server error';\n  return NextResponse.json(\n    { error: errorMessage },\n    { status: 500 }\n  );\n}\n}"],"names":[],"mappings":"AAAA,gCAAgC;;;;;AAChC;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,IAAI;QAEnC,IAAI,CAAC,SAAS,QAAQ,IAAI,CAAC,SAAS,QAAQ,IAAI,CAAC,SAAS,UAAU,IAAI,CAAC,SAAS,mBAAmB,EAAE;YACrG,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,OAAO;YACX,UAAU,SAAS,QAAQ;YAC3B,UAAU,SAAS,QAAQ;YAC3B,YAAY,SAAS,UAAU;YAC/B,qBAAqB,SAAS,mBAAmB;YACjD,WAAW,IAAI,KAAK,SAAS,SAAS,IAAI,IAAI;YAC9C,WAAW,SAAS,SAAS,IAAI,EAAE;QACrC;QAEA,mBAAmB;QACnB,IAAA,6HAAQ,EAAC;QAET,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,qBAAqB,KAAK,mBAAmB;gBAC7C,WAAW,KAAK,SAAS;YAC3B;QACF;IAEJ,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAa,GACtB;YAAE,QAAQ;QAAI;IAElB;AACA","debugId":null}}]
}